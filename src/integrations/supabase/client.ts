
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bioarzkfmcobctblzztm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJpb2FyemtmbWNvYmN0Ymx6enRtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4OTYwMTksImV4cCI6MjA1OTQ3MjAxOX0.VJTJA5hKhVWFA4x-pM7jXetJsCz8-aMuJDOoVAlPeQc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
  // Removendo o cabeçalho global x-application-name para evitar problemas de CORS
});

// Chave de armazenamento no localStorage para admin bypass
const ADMIN_BYPASS_AUTH_KEY = 'adminBypassAuthenticated';
const ADMIN_BYPASS_EMAIL_KEY = 'adminBypassEmail';
// Novo: Flag para desativar temporariamente a confirmação de email
const BYPASS_EMAIL_CONFIRMATION_KEY = 'bypassEmailConfirmationEnabled';

// Definir se a confirmação de email está desativada
export const setBypassEmailConfirmation = (enabled: boolean) => {
  try {
    localStorage.setItem(BYPASS_EMAIL_CONFIRMATION_KEY, String(enabled));
    console.log(`Confirmação de email ${enabled ? 'desativada' : 'ativada'}`);
    return true;
  } catch (e) {
    console.error("Erro ao configurar bypass de confirmação de email:", e);
    return false;
  }
};

// Verificar se a confirmação de email está desativada
export const isEmailConfirmationBypassed = () => {
  try {
    return localStorage.getItem(BYPASS_EMAIL_CONFIRMATION_KEY) === 'true';
  } catch (e) {
    console.error("Erro ao verificar bypass de confirmação de email:", e);
    return false;
  }
};

// Verificar se o usuário com bypass está logado
export const isAdminBypassAuthenticated = () => {
  try {
    return localStorage.getItem(ADMIN_BYPASS_AUTH_KEY) === 'true';
  } catch (e) {
    console.error("Erro ao verificar bypass admin:", e);
    return false;
  }
};

// Definir autenticação de bypass do administrador
export const setAdminBypassAuthentication = (email: string) => {
  try {
    localStorage.setItem(ADMIN_BYPASS_AUTH_KEY, 'true');
    localStorage.setItem(ADMIN_BYPASS_EMAIL_KEY, email);
    console.log("Admin bypass definido com sucesso para:", email);
    return true;
  } catch (e) {
    console.error("Erro ao definir bypass admin:", e);
    return false;
  }
};

// Obter o email do administrador bypass
export const getAdminBypassEmail = () => {
  try {
    return localStorage.getItem(ADMIN_BYPASS_EMAIL_KEY);
  } catch (e) {
    console.error("Erro ao obter email de bypass admin:", e);
    return null;
  }
};

// Verificar qualquer tipo de autenticação (normal ou bypass)
export const isAuthenticated = async () => {
  // Verificar primeiro bypass de admin
  if (isAdminBypassAuthenticated()) {
    console.log("[client] Admin bypass autenticado");
    return true;
  }
  
  // Verificar autenticação normal
  try {
    const { data } = await supabase.auth.getSession();
    return !!data.session;
  } catch (e) {
    console.error("Erro ao verificar autenticação:", e);
    return false;
  }
};

// Função para logout (limpa tanto o auth do Supabase quanto o bypass de admin)
export const logoutUser = async () => {
  try {
    // Limpar bypass de admin se existir
    localStorage.removeItem(ADMIN_BYPASS_AUTH_KEY);
    localStorage.removeItem(ADMIN_BYPASS_EMAIL_KEY);
    
    // Logout normal do Supabase
    await supabase.auth.signOut();
    
    console.log("Usuário deslogado com sucesso");
    return true;
  } catch (e) {
    console.error("Erro ao fazer logout:", e);
    return false;
  }
};

// Ativar bypass de confirmação de email por padrão
setBypassEmailConfirmation(true);
