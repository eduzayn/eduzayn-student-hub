
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bioarzkfmcobctblzztm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJpb2FyemtmbWNvYmN0Ymx6enRtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4OTYwMTksImV4cCI6MjA1OTQ3MjAxOX0.VJTJA5hKhVWFA4x-pM7jXetJsCz8-aMuJDOoVAlPeQc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'x-application-name': 'eduzayn'
    }
  }
});

// Verificar se o usuário com bypass está logado
export const isAdminBypassAuthenticated = () => {
  return localStorage.getItem('adminBypassAuthenticated') === 'true';
};

// Verificar qualquer tipo de autenticação (normal ou bypass)
export const isAuthenticated = async () => {
  // Verificar primeiro bypass de admin
  if (isAdminBypassAuthenticated()) {
    return true;
  }
  
  // Verificar autenticação normal
  const { data } = await supabase.auth.getSession();
  return !!data.session;
};

// Função para logout (limpa tanto o auth do Supabase quanto o bypass de admin)
export const logoutUser = async () => {
  // Limpar bypass de admin se existir
  localStorage.removeItem('adminBypassAuthenticated');
  localStorage.removeItem('adminBypassEmail');
  
  // Logout normal do Supabase
  await supabase.auth.signOut();
};
